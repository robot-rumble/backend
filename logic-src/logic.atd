type main_input = {
  p1_code : string;
}

type main_output = {
  winner : string;
  turns : state list;
}

type state = {
  turn : int;
  units : unit_list;
  teams : units_by_team;
  map : map;
}

type robot_input = {
  state : state;
  friend : team;
  foe : team;
}

type robot_output = {
  actions : action_list;
}

type id = string

type unit_list = (id * unit_) list <json repr="object">

type action_list = (id * action) list <json repr="object">

type team = [ Red | Blue ]
<ocaml repr="classic">

type units_by_team = (string * id list) list <json repr="object">

(*
type units_by_team = (string * id list) list <json repr="object"> wrap
<ocaml t="(team * id list) list" wrap="List.map ~f:(
  fun (team, units) -> match team with
  | \"Blue\" -> (`Blue, units)
  | \"Red\" -> (`Red, units)
  | _ -> failwith \"Invalid team.\"
)" unwrap="List.map ~f:(
  fun (team, units) -> match team with
  | `Blue -> (\"Blue\", units)
  | `Red -> (\"Red\", units)
)">
*)

type map = tile list <ocaml repr="array"> list <ocaml repr="array">

type tile = [ Unit of id | Wall | Empty ]
<json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">
<ocaml repr="classic">

type coords = (int * int)

type unit_ = {
  type_ : unit_type;
  coords : coords;
  health : int;
  id : id;
  team : team;
(* next_action : action; *)
}

type unit_type = [ Soldier ]
<ocaml repr="classic">

type action = {
  type_ <json name="type">: action_type;
  direction: direction;
}

type action_type = [ Move | Attack ]
<ocaml repr="classic">

type direction = [ Left | Right | Up | Down ]
<ocaml repr="classic">

